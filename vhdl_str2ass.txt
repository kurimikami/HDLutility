今までの仕様はクリアして
以下のpythonプログラムを作って
### **要求仕様**

#### **目的**
VHDLファイルからネットとインスタンスのポート接続情報を抽出し、その情報を指定された形式でテキストファイルに出力するPythonプログラムを作成する。

#### **機能**
1. **VHDLファイルの解析**:
   - 入力されたVHDLファイルを読み込み、最上位階層のentity名、ポート宣言、インスタンスのポートマッピングを解析する。
   - インスタンスのVHDLファイルを読み込みentity名、ポート宣言を解析する。
   - インスタンスのVHDLファイルはインスタンスのコンポーネント名-e.vhdというファイル名である。
   - コメント行（`--`で始まる行）を無視し、解析から除外する。
   - `entity`宣言内のポート名とその方向（`in`, `out`, `inout`）を抽出し、記録する。
   - インスタンスのポートマッピング情報を抽出し、各インスタンス名とそのポート接続を管理する。
   - インスタンスのポートの方向を管理する。

2. **テキストファイルの生成**:
   - 抽出された情報を基に、テキストファイルを生成する。
   - 出力フォーマットはネット毎に、ネット名, 接続先のポート名
   - 接続先のポートがインスタンスのポートの場合の接続先のポート名はインスタンス名.インスタンスのポート名を使用する。
   - 接続先のポートが最上位階層のポート名の場合は最上位階層のポート名を使用する。
   - 複数のポートが同一ネットに接続されている場合は、","で区切って、同一行の後に追加する。

3. **コマンドライン引数のサポート**:
   - コマンドライン引数を用いて、入力VHDLファイルと出力テキストファイルのパスを指定できるようにする。

4. **正規表現を使用した解析**:
   - VHDLファイルの解析において、`entity`名、ポート宣言、インスタンスのポートマッピングを抽出するために
   r'(\w+)\s*:\s*(?:entity|component)\s+([\w\.]+)\s*port\s*map\s*\(([^;]+)\);'
   の正規表現を使用する。

5. **エラーハンドリング**:
   - 指定されたVHDLファイルが存在しない場合や、テキストファイルの保存に失敗した場合、適切なエラーメッセージを表示する。
   - インスタンスのVHDL入るの読み込みに失敗した場合、適切なエラーメッセージを表示する。
   - インスタンスのVHDLファイルポート宣言と最上位階層のインスタンスのポートマッピングに矛盾がある場合は適切なエラーメッセージを表示する。

#### **出力**
- 指定されたパスにテキストファイルを生成し、成功した場合は生成メッセージを表示する。
