### 要求仕様書: SystemVerilog モジュールポート宣言変換プログラム（マクロ展開なし）

#### 1. **目的**
本プログラムは、SystemVerilogコード内のモジュールポート宣言を指定された形式に変換することを目的としています。特に、`define` で宣言されたマクロが使用されている場合、マクロ展開は行わず、そのまま出力に残す仕様です。また、コメントは無視して解析を行います。

---

#### 2. **機能概要**
1. **ポート宣言の変換**:
   - `input`/`output` ポート宣言を、モジュール定義内のポートリストに移動し、適切な形式に変換します。
2. **マクロ展開を行わない**:
   - `define` で宣言されたマクロがポート幅に使われている場合、そのままの形で変換後のコードに保持します（展開しません）。
3. **コメント無視**:
   - 行コメント (`//` 以降) およびブロックコメント (`/* ... */`) を無視して解析・変換を行います。
4. **ファイル入出力**:
   - コマンドライン引数で指定された入力ファイルを読み込み、変換後のコードを指定された出力ファイルに書き出します。

---

#### 3. **詳細仕様**

##### 3.1. **入力**
- **形式**: SystemVerilogのソースコードファイル（例: `.sv`）
- **内容**:
  - 1つ以上のモジュール定義を含むSystemVerilogソースコード。
  - 各モジュールは以下の要素を持つ可能性がある:
    - ポートリスト
    - `input`/`output` 宣言
    - コメント（行コメント、ブロックコメント）
    - `define` マクロが含まれることもある。
- **入力例**:
  ```verilog
  `define WIDTH 8
  module test (
  A,
  B,
  C,
  Y
  );
  input A;
  input [`WIDTH-1:0] B,C;
  output [4:0] Y;
  endmodule
  ```

##### 3.2. **出力**
- **形式**: SystemVerilogのソースコードファイル（例: `.sv`）
- **内容**:
  - コメントを無視し、ポート宣言の形式を変換したSystemVerilogコード。
  - `define` マクロや式は展開せず、そのまま保持。
  - ポートリスト内の宣言形式:
    - 変換後、各ポートの型（`input`, `output`）とビット幅がポートリスト内に記述されます。
    - 最後のポート宣言の後にカンマは付けず、`endmodule`の前に改行を追加します。
- **出力例**:
  ```verilog
  module test (
  input A,
  input [`WIDTH-1:0] B,
  input [`WIDTH-1:0] C,
  output [4:0] Y
  );
  endmodule
  ```

##### 3.3. **機能要件**
1. **コメント無視**:
   - `//` 以降の行コメントおよび、`/* ... */` のブロックコメントを無視して処理します。
   
2. **ポート宣言変換**:
   - `input` または `output` の宣言をモジュールヘッダ内に移動し、適切な形式に変換します。
   - 同じ型（`input`/`output`）を持つ複数ポートの宣言は個別に処理されます。
   
3. **マクロ展開なし**:
   - `define` で定義されたマクロがポートの幅に使われている場合、そのマクロや式を展開せず、そのまま出力に残します。
   
4. **ファイル入出力**:
   - コマンドライン引数で指定されたファイルを読み込み、結果を指定されたファイルに出力します。

---

#### 4. **非機能要件**
1. **エラーハンドリング**:
   - 入力ファイルが存在しない場合、エラーメッセージを表示して終了します。
   - コマンドライン引数が不足している場合、使い方（Usage）のメッセージを表示して終了します。
   - 入力ファイルの内容が正しくない（例: `module` 宣言が見つからない）場合、エラーメッセージを表示して終了します。
   
2. **実行環境**:
   - プログラムはPython 3.xで動作します。

---

#### 5. **使用方法**
1. プログラムは、コマンドラインから以下の形式で実行されます:
   ```bash
   python convert_sv.py <input_file> <output_file>
   ```
   例:
   ```bash
   python convert_sv.py input.sv output.sv
   ```

---

#### 6. **制約事項**
- プログラムは、1つのファイルに複数のモジュールが含まれている場合にも対応可能ですが、大規模なコードや複雑な構文はパフォーマンスが保証されません。
- コメントは無視されますが、コード内の特殊なSystemVerilog構文や複雑な式には対応していません。

---

#### 7. **拡張可能性**
- 複数のモジュールや高度なSystemVerilog構文解析にも対応するための機能拡張が可能です。
- インラインコメントの保持や、複雑なマクロの解析と展開に対応する機能を追加することができます。

---

### まとめ
このプログラムは、SystemVerilogモジュールのポート宣言を指定された形式に変換するツールです。`define` マクロを展開せずにポート宣言を適切な位置に移動し、入力・出力ファイルを指定してファイル変換を行います。